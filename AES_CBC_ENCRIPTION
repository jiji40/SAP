package eu.pregatire.aes.cbc;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AES_CBC_ENCRIPTION {
	public static void encryptCBC(String inputFileName, String password, String outputFileName, String encAlgorithm)
			throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
			IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {

		// managing files
		File inputFile = new File(inputFileName);
		if (!inputFile.exists()) {
			System.out.println("---------- The file is not there -------");
			throw new FileNotFoundException();
		}
		FileInputStream fis = new FileInputStream(inputFile);
		//BufferedInputStream bis = new BufferedInputStream(fis);

		File outputFile = new File(outputFileName);
		if (!outputFile.exists()) {
			outputFile.createNewFile();
		}
		FileOutputStream fos = new FileOutputStream(outputFile);

		// CBC requires an IV value - it's not a secret
		// option 1 - use predefine value
		// option 2 - generate a random one

		// decide how to handle it
		// option 1 - hardcode the value
		// option 2 - write it in the cipher text file - at the beginning

		// we go for a random one that we will write at the beginning of the file

		// create the Cipher
		Cipher cipher = Cipher.getInstance(encAlgorithm + "/CBC/PKCS5Padding");
		int blockSize = cipher.getBlockSize();

		// generate a random IV
		SecureRandom secureRandom = SecureRandom.getInstance("SHA1PRNG");
		byte[] iv = new byte[blockSize];
		secureRandom.nextBytes(iv);

		// init the Cipher
		SecretKeySpec key = new SecretKeySpec(password.getBytes(), encAlgorithm);
		IvParameterSpec ivParam = new IvParameterSpec(iv);
		cipher.init(Cipher.ENCRYPT_MODE, key, ivParam);

		// write it in the output file
		fos.write(iv);

		byte[] inputBuffer = new byte[blockSize];
		byte[] outputBuffer;
		int noBytes = 0;

		while ((noBytes = fis.read(inputBuffer)) != -1) {
			outputBuffer = cipher.update(inputBuffer, 0, noBytes);
			fos.write(outputBuffer);
		}
		outputBuffer = cipher.doFinal();
		fos.write(outputBuffer);

		fis.close();
		fos.close();
	}
}
