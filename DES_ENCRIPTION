package eu.pregatire.des;

import java.security.InvalidKeyException;
import java.security.NoSuchAlgorithmException;
import java.util.Base64;

import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;

public class DES_ENCRIPTION {
	private static Cipher ecipher;
	private static SecretKey key;

	public static void encryptDES(String message) throws NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException {
		key = KeyGenerator.getInstance("DES").generateKey();
		ecipher = Cipher.getInstance("DES");
		// initialize the ciphers with the given key
		ecipher.init(Cipher.ENCRYPT_MODE, key);
		String encrypted = encrypt(message);
		System.out.println(encrypted);
		DES_DECRIPTION.decryptDES(encrypted, key);
	}

	public static String encrypt(String str) {

		try {

			// encode the string into a sequence of bytes using the named charset

			// storing the result into a new byte array.

			byte[] utf8 = str.getBytes("UTF8");

			byte[] enc = ecipher.doFinal(utf8);

			// encode to base64

			enc = Base64.getEncoder().encode(str.getBytes());//BASE64EncoderStream.encode(enc);
			//Base64.getEncoder().encodeToString(currentHash);
			return new String(enc);

		}

		catch (Exception e) {

			e.printStackTrace();

		}

		return null;

	}
}
