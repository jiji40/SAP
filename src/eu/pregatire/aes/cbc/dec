package eu.pregatire.aes.cbc;

import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.security.AlgorithmParameters;
import java.security.InvalidAlgorithmParameterException;
import java.security.InvalidKeyException;
import java.security.Key;
import java.security.KeyFactory;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.util.concurrent.RecursiveAction;

import javax.crypto.BadPaddingException;
import javax.crypto.Cipher;
import javax.crypto.IllegalBlockSizeException;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKeyFactory;
import javax.crypto.spec.IvParameterSpec;
import javax.crypto.spec.PBEKeySpec;
import javax.crypto.spec.PBEParameterSpec;
import javax.crypto.spec.SecretKeySpec;

public class AES_CBC_DECRIPTION {

	
	public static void decryptCBC(String inputFileName, String password, String outputFileName, String encAlgorithm)
			throws IOException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,
			IllegalBlockSizeException, BadPaddingException, InvalidAlgorithmParameterException {

		// managing files
		File inputFile = new File(inputFileName);
		if (!inputFile.exists()) {
			System.out.println("---------- The file is not there -------");
			throw new FileNotFoundException();
		}
		FileInputStream fis = new FileInputStream(inputFile);

		File outputFile = new File(outputFileName);
		if (!outputFile.exists()) {
			outputFile.createNewFile();
		}
		FileOutputStream fos = new FileOutputStream(outputFile);

		// cipher
		Cipher cipher = Cipher.getInstance(encAlgorithm + "/CBC/PKCS5Padding");
		int blockSize = cipher.getBlockSize();
		SecretKeySpec key = new SecretKeySpec(password.getBytes(), encAlgorithm);

		// we know the IV is the first block in the received file
		byte[] iv = new byte[blockSize];
		fis.read(iv);

		IvParameterSpec ivParam = new IvParameterSpec(iv);

		cipher.init(Cipher.DECRYPT_MODE, key, ivParam);

		byte[] input = new byte[blockSize];
		byte[] output;
		int noBytes = 0;

		while ((noBytes = fis.read(input)) != -1) {
			output = cipher.update(input, 0, noBytes);
			fos.write(output);
		}

		output = cipher.doFinal();
		fos.write(output);

		fis.close();
		fos.close();
	}
}
